[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --oneline -n 20 --graph --decorate
	history = log --oneline --all -n 20 --graph --decorate
	# View the current working tree status using the short format
	stat = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	pup = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	clear = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

[apply]
	whitespace = fix
[core]
	autocrlf = input
	eol = lf
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	ignoreCase = false
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[help]
	autoCorrect = 10
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	recurseSubmodules = check

[remote "upstream"]
	fetch = +refs/heads/*:refs/remotes/upstream/*

{{- if stdinIsATTY }}
[url "git@gitlab.com:"]
	insteadOf = "gitlab:"
	pushInsteadOf = "git://gitlab.com/"
	pushInsteadOf = "https://gitlab.com/"
[url "git@github.com:"]
	insteadOf = "github:"
	pushInsteadOf = "git://github.com/"
	pushInsteadOf = "https://github.com/"
[url "https://gist.github.com/"]
	insteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
	pushInsteadOf = "git@gist.github.com:"
{{- end }}

[user]
	name = {{ .name }}
	email = {{ .email }}
{{- if .gpg }}
	signingKey = {{ .gpg }}

[tag]
	forceSignAnnotated = true
[commit]
	gpgSign = true

{{-   if eq .chezmoi.os "windows" }}
[gpg]
 	program = "C:\\Program Files (x86)\\gnupg\\bin\\gpg.exe"
{{-   end }}
{{- end }}

[diff]
	# Detect copies as well as renames
	renames = copies

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[protocol]
	version = 2

[init]
	defaultBranch = main
